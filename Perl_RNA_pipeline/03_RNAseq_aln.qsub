#!/bin/bash -l

# this file serving as template for creating customized qsub file, 
# the file name shall be changed properly after customized for job.
# run 'qsub myjobname.qsub'
#
# All lines starting with "#" are comments
# All lines starting with "#$" are SGE qsub commands
# 

#  Specify a project to use (Required for BUMC projects).
#$ -P tcwlab

#  Give this job a name
#$ -N aRNASeq_{PROJECTNAME}_align

#  Join standard output and error to a single file
#$ -j y #could be 'n' if not to merge error and output

#  Name the log directory where to redirect standard output and error
#$ -o ../qlog/aln # make sure qlog/ exists and is in the working directory, otherwise give the full path.

#  request enough memory:
# 4G is too small, job got killed
# try 8G
#$ -l mem_per_core=8G  

# Specify computing resources
# can be omp, 
#$ -pe omp 8 

# distributing all the fastq files to 20 tasks
#$ -t 1-{SGE_TOTAL_TASK}  #40 

# Now let's keep track of some information just in case anything goes wrong
echo "=========================================================="
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "Total task number : $SGE_TASK_LAST"
echo "=========================================================="


# Load any modules you might want to use.

# load star:
#module load star/2.5.3a  #SCC doesn't have the specific version
module load star/2.7.9a

# add executable path:
#COMMON_SCRIPT_DIR=/projectnb/tcwlab/yshen16/Project/scripts
PATH={COMMON_SCRIPT_DIR}:$PATH

# set up the general environ. vars: 
TCWLAB_ROOT=/projectnb/tcwlab/
# use the newly generated genome index:
GENOME_DIR=${TCWLAB_ROOT}/RawData/Genome2.7.9a/hg38/

# now do the main process: 
#RAW_DIR=/projectnb/tcwlab/RawRNAseq/IsogenicAPOE/wpoon228 #Raw seq location
#JULIA_DIR=/projectnb/tcwlab/Project/IsogenicAPOE/  # orig. project location
#YUN_DIR={PROJECT_DIR} #/projectnb/tcwlab/yshen16/Project/IsogenicAPOE/  # yun's working project location
#cd /projectnb/tcwlab/yshen16/JuliaNote # copied JuliaNote for reference

FASTQ_DIR={PROJECT_DIR}/FASTQ/
#FASTQC_OUTDIR=${YUN_DIR}/FASTQC_OUTPUT
ALIGN_DIR={PROJECT_DIR}/Alignment

# STAR --help :
# 9066:readFilesIn                 Read1 Read2
# 9106-    string(s): paths to files that contain input read1 (and, if needed,  read2)
# 9186-
# 9187-readFilesManifest           -
# 9217-    string: path to the "manifest" file with the names of read files. The manifest file should contain 3 tab-separated columns:
# 9345-            paired-end reads: read1_file_name $tab$ read2_file_name $tab$ read_group_line.
# --
# 9527-            Spaces, but not tabs are allowed in file names.
# 9587-            If read_group_line does not start with ID:, it can only contain one ID field, and ID: will be added to it.
# 9706-            If read_group_line starts with ID:, it can contain several fields separated by $tab$, and all fields will be be copied verbatim into SAM @RG header line.
# 9872-
# 9873-readFilesPrefix             -
# 9903:    string: prefix for the read files names, i.e. it will be added in front of the strings in --readFilesIn
# 10011-
# 10012-readFilesCommand             -
# 10043-    string(s): command line to execute for each of the input file. This command should generate FASTA or FASTQ text and send it to stdout
# 10181-               For example: zcat - to uncompress .gz files, bzcat - to uncompress .bz2 files, etc.
# 10280-
# ### Output: general
# outFileNamePrefix               ./
#     string: output files name prefix (including full or relative path). Can only be defined on the command line.

mkdir -p $ALIGN_DIR
total_fq=$((`wc -l < $FASTQ_DIR/sample_map.csv`-1))
# this sample_treatment_list shall contains all the sequence names for the fastq files to be aligned
sample_name_list=$FASTQ_DIR/sample_treatment_list.csv
total_sample=`wc -l < $sample_name_list`
echo "There are $total_fq files under $FASTQ_DIR and they represent $total_sample samples"

# split batch: 
# CMD="task_distrib.pl $sample_name_list $SGE_TASK_LAST $SGE_TASK_ID"
# echo $CMD
# sample_batch=`eval $CMD`
# echo $sample_batch

sample_batch=`task_distrib.pl $sample_name_list $SGE_TASK_LAST $SGE_TASK_ID`

for sample in ${sample_batch[@]}
do
    echo $sample
    CMD="time STAR --genomeDir $GENOME_DIR --readFilesIn ${FASTQ_DIR}/*_${sample}_R*.fastq.gz --runThreadN $NSLOTS --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM --alignIntronMax INTRONMAX --readFilesCommand zcat --outFileNamePrefix ${ALIGN_DIR}/${sample} --sjdbGTFfile ${GENOME_DIR}/gencode.v26.annotation.gtf"
    echo $CMD
    eval $CMD
done
echo "++++++++++++++++++"

echo "=========================================================="
echo "Finished Batch #$SGE_TASK_ID on : $(date)"
echo "=========================================================="
